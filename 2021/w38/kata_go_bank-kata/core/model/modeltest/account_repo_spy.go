// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package modeltest

import (
	"kata/core/model"
	"sync"
)

// Ensure, that AccountRepoSpy does implement AccountRepo.
// If this is not the case, regenerate this file with moq.
var _ AccountRepo = &AccountRepoSpy{}

// AccountRepoSpy is a mock implementation of AccountRepo.
//
// 	func TestSomethingThatUsesAccountRepo(t *testing.T) {
//
// 		// make and configure a mocked AccountRepo
// 		mockedAccountRepo := &AccountRepoSpy{
// 			LoadFunc: func(clientID model.ClientID) ([]model.TransactionRecord, error) {
// 				panic("mock out the Load method")
// 			},
// 			SaveFunc: func(transaction model.TransactionRecord) error {
// 				panic("mock out the Save method")
// 			},
// 		}
//
// 		// use mockedAccountRepo in code that requires AccountRepo
// 		// and then make assertions.
//
// 	}
type AccountRepoSpy struct {
	// LoadFunc mocks the Load method.
	LoadFunc func(clientID model.ClientID) ([]model.TransactionRecord, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(transaction model.TransactionRecord) error

	// calls tracks calls to the methods.
	calls struct {
		// Load holds details about calls to the Load method.
		Load []struct {
			// ClientID is the clientID argument value.
			ClientID model.ClientID
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Transaction is the transaction argument value.
			Transaction model.TransactionRecord
		}
	}
	lockLoad sync.RWMutex
	lockSave sync.RWMutex
}

// Load calls LoadFunc.
func (mock *AccountRepoSpy) Load(clientID model.ClientID) ([]model.TransactionRecord, error) {
	if mock.LoadFunc == nil {
		panic("AccountRepoSpy.LoadFunc: method is nil but AccountRepo.Load was just called")
	}
	callInfo := struct {
		ClientID model.ClientID
	}{
		ClientID: clientID,
	}
	mock.lockLoad.Lock()
	mock.calls.Load = append(mock.calls.Load, callInfo)
	mock.lockLoad.Unlock()
	return mock.LoadFunc(clientID)
}

// LoadCalls gets all the calls that were made to Load.
// Check the length with:
//     len(mockedAccountRepo.LoadCalls())
func (mock *AccountRepoSpy) LoadCalls() []struct {
	ClientID model.ClientID
} {
	var calls []struct {
		ClientID model.ClientID
	}
	mock.lockLoad.RLock()
	calls = mock.calls.Load
	mock.lockLoad.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *AccountRepoSpy) Save(transaction model.TransactionRecord) error {
	if mock.SaveFunc == nil {
		panic("AccountRepoSpy.SaveFunc: method is nil but AccountRepo.Save was just called")
	}
	callInfo := struct {
		Transaction model.TransactionRecord
	}{
		Transaction: transaction,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	return mock.SaveFunc(transaction)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//     len(mockedAccountRepo.SaveCalls())
func (mock *AccountRepoSpy) SaveCalls() []struct {
	Transaction model.TransactionRecord
} {
	var calls []struct {
		Transaction model.TransactionRecord
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}
